// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDEStageData : IGDEData
    {
        private static string stage_lockKey = "stage_lock";
		private bool _stage_lock;
        public bool stage_lock
        {
            get { return _stage_lock; }
            set {
                if (_stage_lock != value)
                {
                    _stage_lock = value;
                    GDEDataManager.SetBool(_key+"_"+stage_lockKey, _stage_lock);
                }
            }
        }

        private static string base_scoreKey = "base_score";
		private int _base_score;
        public int base_score
        {
            get { return _base_score; }
            set {
                if (_base_score != value)
                {
                    _base_score = value;
                    GDEDataManager.SetInt(_key+"_"+base_scoreKey, _base_score);
                }
            }
        }

        private static string high_scoreKey = "high_score";
		private int _high_score;
        public int high_score
        {
            get { return _high_score; }
            set {
                if (_high_score != value)
                {
                    _high_score = value;
                    GDEDataManager.SetInt(_key+"_"+high_scoreKey, _high_score);
                }
            }
        }

        private static string remain_fuelKey = "remain_fuel";
		private float _remain_fuel;
        public float remain_fuel
        {
            get { return _remain_fuel; }
            set {
                if (_remain_fuel != value)
                {
                    _remain_fuel = value;
                    GDEDataManager.SetFloat(_key+"_"+remain_fuelKey, _remain_fuel);
                }
            }
        }

        private static string base_fuelKey = "base_fuel";
		private float _base_fuel;
        public float base_fuel
        {
            get { return _base_fuel; }
            set {
                if (_base_fuel != value)
                {
                    _base_fuel = value;
                    GDEDataManager.SetFloat(_key+"_"+base_fuelKey, _base_fuel);
                }
            }
        }

        private static string game_objectKey = "game_object";
		private GameObject _game_object;
        public GameObject game_object
        {
            get { return _game_object; }
            set {
                if (_game_object != value)
                {
                    _game_object = value;
                    GDEDataManager.SetGameObject(_key+"_"+game_objectKey, _game_object);
                }
            }
        }

        public GDEStageData()
		{
			_key = string.Empty;
		}

		public GDEStageData(string key)
		{
			_key = key;
		}
		
        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetBool(stage_lockKey, out _stage_lock);
                dict.TryGetInt(base_scoreKey, out _base_score);
                dict.TryGetInt(high_scoreKey, out _high_score);
                dict.TryGetFloat(remain_fuelKey, out _remain_fuel);
                dict.TryGetFloat(base_fuelKey, out _base_fuel);
                dict.TryGetGameObject(game_objectKey, out _game_object);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _stage_lock = GDEDataManager.GetBool(_key+"_"+stage_lockKey, _stage_lock);
            _base_score = GDEDataManager.GetInt(_key+"_"+base_scoreKey, _base_score);
            _high_score = GDEDataManager.GetInt(_key+"_"+high_scoreKey, _high_score);
            _remain_fuel = GDEDataManager.GetFloat(_key+"_"+remain_fuelKey, _remain_fuel);
            _base_fuel = GDEDataManager.GetFloat(_key+"_"+base_fuelKey, _base_fuel);
            _game_object = GDEDataManager.GetGameObject(_key+"_"+game_objectKey, _game_object);
         }

        public void Reset_stage_lock()
        {
            GDEDataManager.ResetToDefault(_key, stage_lockKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetBool(stage_lockKey, out _stage_lock);
        }

        public void Reset_base_score()
        {
            GDEDataManager.ResetToDefault(_key, base_scoreKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(base_scoreKey, out _base_score);
        }

        public void Reset_high_score()
        {
            GDEDataManager.ResetToDefault(_key, high_scoreKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(high_scoreKey, out _high_score);
        }

        public void Reset_remain_fuel()
        {
            GDEDataManager.ResetToDefault(_key, remain_fuelKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(remain_fuelKey, out _remain_fuel);
        }

        public void Reset_base_fuel()
        {
            GDEDataManager.ResetToDefault(_key, base_fuelKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(base_fuelKey, out _base_fuel);
        }

        public void Reset_game_object()
        {
            GDEDataManager.ResetToDefault(_key, game_objectKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetGameObject(game_objectKey, out _game_object);
        }

        public void ResetAll()
        {
            GDEDataManager.ResetToDefault(_key, game_objectKey);
            GDEDataManager.ResetToDefault(_key, base_scoreKey);
            GDEDataManager.ResetToDefault(_key, high_scoreKey);
            GDEDataManager.ResetToDefault(_key, remain_fuelKey);
            GDEDataManager.ResetToDefault(_key, base_fuelKey);
            GDEDataManager.ResetToDefault(_key, stage_lockKey);


            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
